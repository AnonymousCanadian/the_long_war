title: Battle
go-to: jumpScene
on-arrival: {!
// front, outcomes
//Q.front is the attacking front
//Q.attacking is either 1 or 0 - 1 is if russia is on the offensive.
// TODO: normal distribution using the Box-Muller transform
var p1 = 2*Math.PI*Math.random();
var R = Math.sqrt(-2*Math.log(Math.random()));
var rand1 = R*Math.cos(p1);
var rand2 = R*Math.sin(p1);
// centered at 3, 2 variance
var variance = 5;
var x1 = 2*rand1 + 3;
var x2 = 2*rand2 + 3;
// results:
if (Q.attacking) {
    var attacking_soldiers = Q[Q.front + '_front_soldiers'];
    var defending_soldiers = Q[Q.enemy_front + '_enemy_soldiers'];
    var defending_morale = Q[Q.enemy_front + '_enemy_morale'];
    var defending_supply = Q[Q.enemy_front + '_enemy_supply_quality'];
    var defense_bonus = Q[Q.enemy_front + '_enemy_defense_bonus'];
    var attack_power = attacking_soldiers*Q.morale*Q.discipline*Math.pow(Q.supply_quality, 1.5);
    var defense_power = defending_soldiers*defending_morale*defending_morale*Math.pow(defending_supply, 1.5)*(1+defense_bonus/2);
    console.log('Attack power:', attack_power);
    console.log('Defense power:', defense_power);
    Q.friendly_casualties = Math.max(2, Math.round(Math.min(defense_power/2 + x1, attacking_soldiers/2)));
    Q.hostile_casualties = Math.max(2, Math.round(Math.min(attack_power/2 + x2, defending_soldiers/2)));
    if (attack_power >= 1.25*defense_power) {
        Q.battle_outcome = 2;
        Q.war_weariness += 10;
        Q.victory_count += 1;
        Q[Q.front + '_progress'] += 1;
    } else if (attack_power >= defense_power) {
        Q.battle_outcome = 1;
        Q.war_weariness += 10;
        Q.victory_count += 1;
        Q[Q.front + '_progress'] += 1;
    } else if (attack_power > 0.5*defense_power) {
        Q.battle_outcome = -1;
        Q.war_weariness += 20;
        Q.defeat_count += 1;
    } else {
        Q.battle_outcome = -2;
        Q.war_weariness += 30;
        Q.defeat_count += 1;
    }
    Q[Q.front + '_front_soldiers'] -= Q.friendly_casualties;
    Q[Q.enemy_front + '_enemy_soldiers'] -= Q.hostile_casualties;
} else {
    var attacking_soldiers = Q[Q.enemy_front + '_enemy_soldiers'];
    var attacking_morale = Q[Q.enemy_front + '_enemy_morale'];
    var attacking_discipline = Q[Q.enemy_front + '_enemy_discipline'];
    var attacking_supply = Q[Q.enemy_front + '_enemy_supply_quality'];
    var defending_soldiers = Q[Q.front + '_front_soldiers'];
    var attack_power = attacking_soldiers*attacking_morale*attacking_discipline*Math.pow(attacking_supply, 1.5);
    var defense_power = defending_soldiers*Q.morale*Q.morale*Math.pow(Q.supply_quality, 1.5)*(1+Q.defense_bonus/2);
    console.log('Attack power:', attack_power);
    console.log('Defense power:', defense_power);
    Q.friendly_casualties = Math.max(2, Math.round(Math.min(attack_power/2 + x1, defending_soldiers/2)));
    Q.hostile_casualties = Math.max(2, Math.round(Math.min(defense_power/2 + x2, attacking_soldiers/2)));
    if (attack_power >= 1.5*defense_power) {
        Q.battle_outcome = -2;
        Q.war_weariness += 5;
        Q.defeat_count += 1;
        Q[Q.front + '_progress'] -= 1;
    } else if (attack_power >= defense_power) {
        Q.battle_outcome = -1;
        Q.war_weariness += 10;
        Q.defeat_count += 1;
        Q[Q.front + '_progress'] -= 1;
    } else if (attack_power > 0.75*defense_power) {
        Q.battle_outcome = 1;
        Q.war_weariness += 15;
        Q.victory_count += 1;
    } else {
        Q.battle_outcome = 2;
        Q.war_weariness += 20;
        Q.victory_count += 1;
    }
    Q[Q.front + '_front_soldiers'] -= Q.friendly_casualties;
    Q[Q.enemy_front + '_enemy_soldiers'] -= Q.hostile_casualties;
}

Q.battle_count += 1;
!}
