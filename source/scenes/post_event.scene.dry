title: Post Event
new-page: true
on-arrival: {!
// make sure no stat is below 0.
for (var c of Q.classes) {
    for (var party of Q.parties) {
        if (Q[c+'_'+party] < 0) {
            Q[c+'_'+party] = 0;
        }
    }
}

// re-calculate party support
// calculate normalized class voting for the achievements
for (var c of Q.classes) {
    var class_votes = 0;
    for (var party of Q.parties) {
        if (Q[c+'_'+party] < 0) {
            Q[c+'_'+party] = 0;
        }
        class_votes += Q[c+'_'+party];
    }
    for (var party of Q.parties) {
        Q[c + '_' + party + '_normalized'] = 100*Q[c+'_'+party]/class_votes;

        Q[c + '_' + party + '_display'] = Math.round(100*Q[c+'_'+party]/class_votes);
    }
}
// calculate support for each of the parties
var total_support = 0; 
for (var party of Q.parties) {
    var party_support = 0;
    for (var c of Q.classes) {
        if (Q.old_demographics) { 
            party_support += Q[c]*Q[c+'_'+party];
        } else  { 
            party_support += Q[c]*Q[c+'_'+party+'_normalized'];
        } 
    }
    Q[party + '_support'] = party_support;
    total_support += party_support; 
}
// 2. normalize support (fraction)
for (var party of Q.parties) {
    Q[party+'_normalized'] = Q[party + '_support']/total_support;
    Q[party+'_votes'] = Math.round(Q[party+'_normalized']*100);
    Q[party+'_votes_display'] = Math.round(Q[party+'_normalized']*100);
}


// set faction strength/dissent to 0
for (var p of Q.parties) {
    var total_strength = 0;
    var total_dissent = 0;
    if (Q[p+"_factions"]) {
        for (var c of (Q[p+"_factions"])) {
            if (Q[c+'_dissent'] < 0) {
                Q[c+'_dissent'] = 0;
            } else if (Q[c+'_dissent'] >= 100) {
                Q[c+'_dissent'] = 99;
            }
            if (Q[c+'_strength'] < 0) {
                Q[c+'_strength'] = 0;
            }
            total_strength += Q[c+'_strength'];
        }
        for (var c of (Q[p+"_factions"])) {
            Q[c+'_strength'] = 100*Q[c+'_strength']/total_strength;
            total_dissent += Q[c+'_dissent']*Q[c+'_strength']/total_strength;
        }
        Q[p+'_dissent'] = 0.01*total_dissent;
        Q[p+'_percent_dissent'] = total_dissent;
        console.log(p+'_dissent', Q[p+'_dissent']);
    }
}


if (Q.unemployed <= 1) {
    Q.unemployed = 1;
}

// re-calculate dissent.
var total_strength = 0; 

var total_dissent = 0;

// inflation
Q.inflation = Math.pow(1+0.01*Q.monthly_inflation, 12);
Q.inflation = Math.round(100*(Q.inflation - 1));

// 1. update dates
if (Q.week_actions >= 1) {
    Q.week_actions = 0;
    if (Q.current_player >= Q.n_players) {
        Q.time += 1;
        Q.week += 1;
        if (Q.week >= 5) {
            Q.month += 1;
            Q.week = 1;
        }
        if (Q.month >= 13) {
            Q.month = 1;
            Q.year += 1;
        }
        // decrement timers
        for (timer of Q.timers) {
            if (Q[timer+'_timer'] && Q[timer+'_timer'] > 0) {
                Q[timer+'_timer'] -= 1;
            }
        }
    } else {
        Q.current_player += 1;
        Q.player_party = Q['player'+current_player+'_party'];
        Q.player_party_name = Q.party_name_map[Q.player_party];
    }
    // TODO: change party support based on present conditions...
}
Q.has_event = 0;
// check if there are any cards in #event, and then go to main if not.
var scene = this.game.scenes['post_event.events_choice'];
var choices = this._compileChoices(scene);
if (choices && choices[0].title != "Continue...") {
    Q.has_event = 1;
} else {
    has_event = 0;
}

if (typeof window !== "undefined" && window.generateBar) {
}
!}
go-to: events_choice if has_event = 1; main if has_event = 0

= Week [+ week +], [+ month : month +] [+ year +]

@events_choice

- #event

# go-to: main

# This scene is solely for updating numbers after events, and routing to special events.

# TODO: don't have to do event dispatch here - we can just have a tag with a maximum number
